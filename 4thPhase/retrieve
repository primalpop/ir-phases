#!/usr/bin/python
#coding: utf8
"""
index

Homework 4: http://www.csee.umbc.edu/~nicholas/676/term%20project/hw4.html

Author: Primal Pappachan, primal1@umbc.edu

Usage:
  retrieve wts <files> <query_term_weights>
  retrieve -h | --help
  retrieve --version

Arguments:
    wts specify weights to query terms

Options:
  -h --help     Show this screen.
  --version     Show version.

"""

import nltk, unicodedata, HTMLParser
import os, sys, re
import collections
import random, math
from pprint import pprint
import operator
from docopt import docopt

class Index:
    """Variables for building index"""
    def __init__(self):
        self.weights = collections.defaultdict(dict) #term : document : normalized term weight

class Calcwts:
    """ Methods and variables for term weight computation """
    def __init__(self):
        self.model = collections.defaultdict(dict) #document : term : frequency
        self.total_docs = 0 #Total Number of documents
        self.avg_doclen = 0 #Average length of documents
        self.inverse_doc_freq = {} #Inverse Document Frequency

    def freq(self, tokens):
        index = {}
        for (term, freq) in collections.Counter(tokens).iteritems():
            index[term] = freq
        return index

    def tf(self, term_freq, total_freq):
        """Computes term frequency"""
        return term_freq / float (total_freq)

    def idf(self, word):
        """ Computes Inverse Document frequency """
        return math.log(self.total_docs / float(self.inverse_doc_freq[word]))

    def tf_idf(self, word, doc, doclen):
        term_freq = self.model[doc][word]
        tf_value = self.tf(term_freq, doclen)
        idf_value = self.idf(word)
        return tf_value * idf_value

    def bm25_ranking(self, word, doc, doclen):
        """ Calculates BM25 with K1 = 1 and S1 = K1 + 1 """
        k1 = 1
        s1 = k1 + 1
        freq = self.model[doc][word]
        return s1 * (freq / ( ( (k1 * doclen ) / self.avg_doclen ) + freq ))

class Tokenization:
    """Methods and variables for tokenization"""
    def __init__(self):
        self.html_parser = HTMLParser.HTMLParser()
        self.tokenizer = nltk.tokenize.RegexpTokenizer("[\wâ€™]+", flags=re.UNICODE)
        self.stopwords = open('stoplist.txt').read().splitlines() #from file
        try:
            self.stopwords.extend(nltk.corpus.stopwords.words('english')) #from nltk corpus
        except Exception:
            pass

    def clean_html(self, raw):
        """
        Clean the raw string.
        It removes the html markup, formatting as well as non alphanumeric characters.
        Return string.
        """
        cleaned = nltk.clean_html(raw)
        cleaned = cleaned.decode('utf8', 'ignore')
        cleaned = self.html_parser.unescape(cleaned)
        cleaned = unicodedata.normalize('NFKD', cleaned).encode('latin-1','ignore')
        return cleaned

    def extract_tokens(self, cleaned):
        """
        Converts cleaned text to a vocabulary.
        Returns dictionary.
        """
        text = self.tokenizer.tokenize(cleaned)
        #Limiting words to have size > 2 and < 20 and not numbers
        words = [w.lower() for w in text if len(w) > 2 and len(w) < 20 and not w.isdigit()]
        #Stopwords removal
        words = [word for word in words if word not in self.stopwords]
        return words

def write_to_file(output, filename):
    """ Writes into an output file. """
    with open(filename, "w") as f:
        f.write(output)

def compute_file_size(files):
    """Computes the file size in MB"""
    mb = 1024*1024.0
    if type(files) is list: #for multiple files
        return sum([os.path.getsize(filename) for filename in files]) / mb
    else: #for single file
        return os.path.getsize(files) / mb

def file_id(doc):
    return os.path.basename(doc)

def main(args):
    input_path= args['<files>']
    number_of_files = 503
    query_list = args['<query_term_weights>'].split()

    tkr = Tokenization()

    #converting into a query vector dictionary
    query_vector = {}
    query_tuple = zip(query_list[::2],query_list[1::2])
    for w, qt in query_tuple:
        cleaned_qt = tkr.clean_html(qt)
        final_qterm = tkr.extract_tokens(cleaned_qt)
        if len(final_qterm) > 0:
            query_vector[final_qterm[0]] = eval(w)

    list_of_files = []
    for (dirpath, dirnames, filenames) in os.walk(input_path):
        for filename in filenames:
            list_of_files.append(os.sep.join([dirpath, filename])) #List of complete files
    random.shuffle(list_of_files) #Randomizing the order of files in the list

    cwts = Calcwts()
    for i in range(0, number_of_files): # Slicing the list of files as per Number of files
        filename = list_of_files[i]
        file_obj = open(filename)
        raw_string = file_obj.read()
        cleaned = tkr.clean_html(raw_string) #cleaning raw html string
        tokens = tkr.extract_tokens(cleaned) #tokenization
        token_frequency = cwts.freq(tokens) #computing frequency of extracted tokens
        for token in tokens:
            cwts.model[filename][token] = token_frequency[token]

    vocabulary = []
    for docs in cwts.model.values():
        vocabulary.extend(docs.keys()) #complete vocabulary with repetitions; for computing document frequency in idf
    cwts.inverse_doc_freq = cwts.freq(vocabulary)

    cwts.total_docs = len(cwts.model.keys())
    for d in cwts.model.keys():
        cwts.avg_doclen += sum(cwts.model[d].values())
    cwts.avg_doclen /= float(cwts.total_docs) #average document length

    inv_index = Index()
    for i in range(0, number_of_files):
        doc = list_of_files[i]
        doclen = sum(cwts.model[doc].values()) #length of document
        for word in cwts.model[doc].keys():
            term_weight = "%.8f" %(cwts.tf_idf(word, doc, doclen))
            inv_index.weights[word][doc] = eval(term_weight) #Creating the [term][document] weight dictionary

    sim_scores = {key: 0 for key in list_of_files}
    for term, wt in query_vector.items():
        for doc in inv_index.weights[term].keys():
            sim_scores[doc]  += inv_index.weights[term][doc] * wt #computing similarity score

    sim_scores_nnz = {file_id(k):v for k,v in sim_scores.items() if v != 0} #non zero similarity scores
    if len(sim_scores_nnz) > 0:
        sorted_scores = sorted(sim_scores_nnz.iteritems(), key=operator.itemgetter(1), reverse=True)
        pprint(sorted_scores[:10])
    else:
        print "No results found"

if __name__ == "__main__":
    arguments = docopt(__doc__, version='Retrieve 1.0')
    main(arguments)
