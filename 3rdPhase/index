#!/usr/bin/python
#coding: utf8
"""
index

Homework 3: http://www.csee.umbc.edu/~nicholas/676/term%20project/hw3.html

Author: Primal Pappachan, primal1@umbc.edu

"""
import nltk, unicodedata, HTMLParser
import os, sys, re
import collections
import random, math

class Index:

    def __init__(self):
        self.weights = collections.defaultdict(dict) #term : document : normalized term weight
        self.dictionary = "dictionary.txt"
        self.postings = "postings.txt"

class Calcwts:
    """ Methods and variables for term weight computation """
    def __init__(self):
        self.model = collections.defaultdict(dict) #document : term : frequency
        self.total_docs = 0 #Total Number of documents
        self.avg_doclen = 0 #Average length of documents
        self.inverse_doc_freq = {} #Inverse Document Frequency

    def freq(self, tokens):
        index = {}
        for (term, freq) in collections.Counter(tokens).iteritems():
            index[term] = freq
        return index

    def tf(self, term_freq, total_freq):
        return term_freq / float (total_freq)

    def idf(self, word):
        """ Computes Inverse Document frequency """
        return math.log(self.total_docs / float(self.inverse_doc_freq[word]))

    #@profile
    def tf_idf(self, word, doc, doclen):
        #import ipdb; ipdb.set_trace()
        term_freq = self.model[doc][word]
        tf_value = self.tf(term_freq, doclen)
        idf_value = self.idf(word)
        return tf_value * idf_value

    def bm25_ranking(self, word, doc, doclen):
        """ Calculates BM25 with K1 = 1 and S1 = K1 + 1 """
        k1 = 1
        s1 = k1 + 1
        freq = self.model[doc][word]
        return s1 * (freq / ( ( (k1 * doclen ) / self.avg_doclen ) + freq ))

class Tokenization:

    def __init__(self):
        self.html_parser = HTMLParser.HTMLParser()
        self.tokenizer = nltk.tokenize.RegexpTokenizer("[\wâ€™]+", flags=re.UNICODE)
        #self.tokenizer = nltk.word_tokenize
        self.stopwords = open('stoplist.txt').read().splitlines() #from file
        try:
            self.stopwords.extend(nltk.corpus.stopwords.words('english')) #from nltk corpus
        except Exception:
            pass

    def clean_html(self, filename):
        """
        Clean the raw string read from Input Document.
        It removes the html markup, formatting as well as non alphanumeric characters.
        Return string.
        """
        f = open(filename)
        raw = f.read()
        cleaned = nltk.clean_html(raw)
        cleaned = cleaned.decode('utf8', 'ignore')
        cleaned = self.html_parser.unescape(cleaned)
        cleaned = unicodedata.normalize('NFKD', cleaned).encode('latin-1','ignore')
        return cleaned

    def extract_tokens(self, cleaned):
        """
        Converts cleaned text to a vocabulary.
        Returns dictionary.
        """
        text = self.tokenizer.tokenize(cleaned)
        #Limiting words to have size > 2 and < 20 and not numbers
        words = [w.lower() for w in text if len(w) > 2 and len(w) < 20 and not w.isdigit()]
        #Stopwords removal
        words = [word for word in words if word not in self.stopwords]
        return words

def write_to_file(output, filename, output_path):
    """ Writes into an output file. """
    outfile = output_path + filename
    with open(outfile, "w") as f:
        f.write(output)

#@profile
def main(input_path='input_files', output_path='out_files', number_of_files=10):
    list_of_files = []
    for (dirpath, dirnames, filenames) in os.walk(input_path):
        for filename in filenames:
            list_of_files.append(os.sep.join([dirpath, filename])) #List of complete files
    random.shuffle(list_of_files) #Randomizing the order of files in the list

    cwts = Calcwts()
    tkr = Tokenization()
    for i in range(0, number_of_files): # Slicing the list of files as per Number of files
        filename = list_of_files[i]
        cleaned = tkr.clean_html(filename) #cleaning raw html string
        tokens = tkr.extract_tokens(cleaned) #tokenization
        token_frequency = cwts.freq(tokens) #computing frequency of extracted tokens
        for token in tokens:
            cwts.model[filename][token] = token_frequency[token]

    vocabulary = []
    for docs in cwts.model.values():
        vocabulary.extend(docs.keys()) #complete vocabulary with repetitions; for computing document frequency in idf
    cwts.inverse_doc_freq = cwts.freq(vocabulary)

    cwts.total_docs = len(cwts.model.keys())
    for d in cwts.model.keys():
        cwts.avg_doclen += sum(cwts.model[d].values())
    cwts.avg_doclen /= float(cwts.total_docs) #average document length

    #import ipdb; ipdb.set_trace()
    inv_index = Index()
    for i in range(0, number_of_files):
        doc = list_of_files[i]
        doclen = sum(cwts.model[doc].values()) #length of document
        for word in cwts.model[doc].keys():
            inv_index.weights[word][doc] = cwts.tf_idf(word, doc, doclen) #Creating the term weight dictionary

    if not output_path.endswith('/'): output_path = output_path + '/' #Checks and adds trailing slash to output directory
    if not os.path.exists(output_path): os.makedirs(output_path)

    posting_id = 0 #variable for posting index counter
    posting_output = "doc id, term weight\n"
    dictionary_output = "term\ndocument frequency\nLocation of first record in postings file"
    tuple_dictionary = []
    for term in inv_index.weights.keys():
        for doc in inv_index.weights[term].keys():
            posting_output +=  "%s \t %s \n" %(doc, str(inv_index.weights[term][doc]))
            posting_id += 1
        tuple_dictionary.append((term, str(cwts.inverse_doc_freq[term]),
            str(posting_id - cwts.inverse_doc_freq[term] + 1)))
    tuple_dictionary.sort() #sorting based on the term
    dictionary_output +=''.join("\n%s" % '\n'.join(map(str, x)) for x in tuple_dictionary) #string formatting for dictionary
    write_to_file(posting_output, inv_index.postings,  output_path)
    write_to_file(dictionary_output, inv_index.dictionary, output_path)

if __name__ == "__main__":
    try:
        input_path = sys.argv[1] #Path to input directory
        output_path = sys.argv[2] #Path to output directory
        if len(sys.argv) == 3:
            main(input_path, output_path)
        else:
            number_of_files = eval(sys.argv[3]) #Number of files
            main(input_path, output_path, number_of_files)
    except Exception:
        print "Missing Parameters"
        print "Usage: ./index input-directory output-directory <n>"
        print "<n> (Optional parameter, Default value: 100) - Number of files in the collection, n = [1, 503]"
        sys.exit(1)
